"use client"

import { useState } from "react"
import { Search, Plus, Calendar, Users } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

export default function VoucherIssuance() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const [isIssueDialogOpen, setIsIssueDialogOpen] = useState(false)
  const [isSuccess, setIsSuccess] = useState(false)
  const [selectedVoucherType, setSelectedVoucherType] = useState("discount")
  const [selectedCustomerType, setSelectedCustomerType] = useState("specific")
  const [isSuccessDialogOpen, setIsSuccessDialogOpen] = useState(false)

  // Mock voucher templates
  const voucherTemplates = [
    { id: 1, title: "Gi·∫£m 50K cho h√≥a ƒë∆°n t·ª´ 200K", type: "discount", value: "50000" },
    { id: 2, title: "Gi·∫£m 20% t·ªïng h√≥a ƒë∆°n", type: "percent", value: "20" },
    { id: 3, title: "T·∫∑ng 1 ph·∫ßn tr√°ng mi·ªáng", type: "gift", value: "Tr√°ng mi·ªáng" },
    { id: 4, title: "Mua 1 t·∫∑ng 1 ƒë·ªì u·ªëng", type: "bogo", value: "ƒê·ªì u·ªëng" },
  ]

  const handleIssueVoucher = () => {
    setIsIssueDialogOpen(false)

    // Simulate API call
    setTimeout(() => {
      setIsSuccess(true)
      setIsSuccessDialogOpen(true)

      //Reset after 3 seconds
      setTimeout(() => {
        setIsSuccess(false)
        setIsSuccessDialogOpen(false)
      }, 3000)
    }, 1000)
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">C·∫•p voucher</h2>
          <p className="text-muted-foreground">T·∫°o v√† c·∫•p voucher cho kh√°ch h√†ng</p>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline" onClick={() => setIsCreateDialogOpen(true)}>
            <Plus className="mr-2 h-4 w-4" />
            T·∫°o voucher m·ªõi
          </Button>
          <Button onClick={() => setIsIssueDialogOpen(true)}>
            <Users className="mr-2 h-4 w-4" />
            C·∫•p voucher
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch m·∫´u voucher</CardTitle>
          <CardDescription>C√°c m·∫´u voucher c√≥ s·∫µn ƒë·ªÉ c·∫•p cho kh√°ch h√†ng</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {voucherTemplates.map((template) => (
              <Card key={template.id} className="border-2 hover:border-pink-200 cursor-pointer">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="p-2 rounded-full bg-pink-100">
                      {template.type === "discount" && <span className="text-pink-600 font-bold">‚Ç´</span>}
                      {template.type === "percent" && <span className="text-pink-600 font-bold">%</span>}
                      {template.type === "gift" && <span className="text-pink-600 font-bold">üéÅ</span>}
                      {template.type === "bogo" && <span className="text-pink-600 font-bold">2=1</span>}
                    </div>
                    <Button variant="ghost" size="sm" onClick={() => setIsIssueDialogOpen(true)}>
                      C·∫•p
                    </Button>
                  </div>
                  <h3 className="mt-3 font-medium">{template.title}</h3>
                  <div className="mt-2 text-sm text-gray-500">
                    {template.type === "discount" && `Gi·∫£m ${Number.parseInt(template.value).toLocaleString()}‚Ç´`}
                    {template.type === "percent" && `Gi·∫£m ${template.value}%`}
                    {template.type === "gift" && `T·∫∑ng ${template.value}`}
                    {template.type === "bogo" && `Mua 1 t·∫∑ng 1 cho ${template.value}`}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* {isSuccess && (
        <Alert className="bg-green-50 border-green-200">
          <AlertTitle className="text-green-800">C·∫•p voucher th√†nh c√¥ng!</AlertTitle>
          <AlertDescription className="text-green-700">ƒê√£ c·∫•p voucher cho kh√°ch h√†ng ƒë√£ ch·ªçn.</AlertDescription>
        </Alert>
      )} */}

      {/* Create Voucher Dialog */}
      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>T·∫°o voucher m·ªõi</DialogTitle>
            <DialogDescription>T·∫°o m·∫´u voucher m·ªõi ƒë·ªÉ c·∫•p cho kh√°ch h√†ng</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="voucherTitle" className="text-right">
                Ti√™u ƒë·ªÅ
              </Label>
              <Input id="voucherTitle" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ voucher" className="col-span-3" />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="voucherType" className="text-right">
                Lo·∫°i voucher
              </Label>
              <Select value={selectedVoucherType} onValueChange={setSelectedVoucherType}>
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Ch·ªçn lo·∫°i voucher" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="discount">Gi·∫£m gi√° c·ªë ƒë·ªãnh</SelectItem>
                  <SelectItem value="percent">Gi·∫£m gi√° ph·∫ßn trƒÉm</SelectItem>
                  <SelectItem value="gift">T·∫∑ng qu√†</SelectItem>
                  <SelectItem value="bogo">Mua 1 t·∫∑ng 1</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="voucherValue" className="text-right">
                Gi√° tr·ªã
              </Label>
              <div className="col-span-3 flex items-center">
                <Input
                  id="voucherValue"
                  placeholder={
                    selectedVoucherType === "discount"
                      ? "Nh·∫≠p s·ªë ti·ªÅn"
                      : selectedVoucherType === "percent"
                        ? "Nh·∫≠p ph·∫ßn trƒÉm"
                        : selectedVoucherType === "gift"
                          ? "Nh·∫≠p t√™n qu√† t·∫∑ng"
                          : "Nh·∫≠p lo·∫°i s·∫£n ph·∫©m"
                  }
                  className="flex-1"
                />
                {selectedVoucherType === "discount" && <span className="ml-2">VNƒê</span>}
                {selectedVoucherType === "percent" && <span className="ml-2">%</span>}
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="minPurchase" className="text-right">
                ƒê∆°n t·ªëi thi·ªÉu
              </Label>
              <div className="col-span-3 flex items-center">
                <Input id="minPurchase" placeholder="Nh·∫≠p gi√° tr·ªã ƒë∆°n t·ªëi thi·ªÉu" className="flex-1" />
                <span className="ml-2">VNƒê</span>
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="validDays" className="text-right">
                Th·ªùi h·∫°n
              </Label>
              <div className="col-span-3 flex items-center">
                <Input id="validDays" placeholder="S·ªë ng√†y c√≥ hi·ªáu l·ª±c" type="number" className="flex-1" />
                <span className="ml-2">ng√†y</span>
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
              H·ªßy
            </Button>
            <Button type="submit">T·∫°o voucher</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Issue Voucher Dialog */}
      <Dialog open={isIssueDialogOpen} onOpenChange={setIsIssueDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>C·∫•p voucher cho kh√°ch h√†ng</DialogTitle>
            <DialogDescription>Ch·ªçn voucher v√† kh√°ch h√†ng ƒë·ªÉ c·∫•p</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div>
              <Label className="mb-2 block">Ch·ªçn voucher</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Ch·ªçn voucher" />
                </SelectTrigger>
                <SelectContent>
                  {voucherTemplates.map((template) => (
                    <SelectItem key={template.id} value={template.id.toString()}>
                      {template.title}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <Separator />

            <div>
              <Label className="mb-2 block">C·∫•p cho</Label>
              <RadioGroup value={selectedCustomerType} onValueChange={setSelectedCustomerType} className="space-y-1">
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="specific" id="specific" />
                  <Label htmlFor="specific">Kh√°ch h√†ng c·ª• th·ªÉ</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="all" id="all" />
                  <Label htmlFor="all">T·∫•t c·∫£ kh√°ch h√†ng</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="filtered" id="filtered" />
                  <Label htmlFor="filtered">Kh√°ch h√†ng theo ƒëi·ªÅu ki·ªán</Label>
                </div>
              </RadioGroup>
            </div>

            {selectedCustomerType === "specific" && (
              <div>
                <div className="flex items-center space-x-2 mb-1">
                  <Search className="h-4 w-4 text-gray-500" />
                  <Input placeholder="T√¨m ki·∫øm kh√°ch h√†ng..." />
                </div>
                <div className="max-h-20 overflow-y-auto border rounded-md">
                  {[1, 2].map((i) => (
                    <div key={i} className="flex items-center space-x-2 py-1 border-b last:border-0 px-2">
                      <Checkbox id={`customer-${i}`} />
                      <Label htmlFor={`customer-${i}`} className="flex-1 text-sm">
                        <div>Nguy·ªÖn VƒÉn {String.fromCharCode(64 + i)}</div>
                        <div className="text-xs text-gray-500">MEM1234{i}</div>
                      </Label>
                      <div className="text-sm text-pink-600 font-medium">{i * 200} ƒëi·ªÉm</div>
                    </div>
                  ))}
                </div>
                <p className="text-xs text-gray-500 mt-1">Hi·ªÉn th·ªã 2 trong 15 kh√°ch h√†ng. S·ª≠ d·ª•ng t√¨m ki·∫øm ƒë·ªÉ l·ªçc.</p>
              </div>
            )}

            {selectedCustomerType === "filtered" && (
              <div className="space-y-2">
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <Label htmlFor="minPoints" className="mb-1 block text-sm">
                      ƒêi·ªÉm t·ªëi thi·ªÉu
                    </Label>
                    <Input id="minPoints" type="number" placeholder="0" className="text-sm" />
                  </div>
                  <div>
                    <Label htmlFor="joinedBefore" className="mb-1 block text-sm">
                      Tham gia tr∆∞·ªõc
                    </Label>
                    <Input id="joinedBefore" type="date" className="text-sm" />
                  </div>
                </div>
                <div>
                  <Label className="mb-1 block text-sm">ƒê√£ s·ª≠ d·ª•ng voucher</Label>
                  <Select>
                    <SelectTrigger className="text-sm">
                      <SelectValue placeholder="Ch·ªçn ƒëi·ªÅu ki·ªán" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="any">B·∫•t k·ª≥</SelectItem>
                      <SelectItem value="yes">C√≥</SelectItem>
                      <SelectItem value="no">Kh√¥ng</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            )}

            <div className="flex items-center space-x-2 pt-2">
              <Calendar className="h-4 w-4 text-gray-500" />
              <p className="text-sm text-gray-500">Voucher s·∫Ω c√≥ hi·ªáu l·ª±c t·ª´ ng√†y c·∫•p v√† h·∫øt h·∫°n sau 30 ng√†y</p>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsIssueDialogOpen(false)}>
              H·ªßy
            </Button>
            <Button onClick={handleIssueVoucher}>C·∫•p voucher</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Success Dialog */}
      <Dialog open={isSuccessDialogOpen} onOpenChange={setIsSuccessDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Th√†nh c√¥ng</DialogTitle>
            <DialogDescription>ƒê√£ c·∫•p voucher cho kh√°ch h√†ng ƒë√£ ch·ªçn.</DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button onClick={() => setIsSuccessDialogOpen(false)}>ƒê√≥ng</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
