"use client"

import type React from "react"

import { useState } from "react"
import { Search, ArrowRight } from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Dialog, DialogClose, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"

export default function PointsManagement() {
  const [customerCode, setCustomerCode] = useState("")
  const [invoiceAmount, setInvoiceAmount] = useState("")
  const [customer, setCustomer] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [pointsToAdd, setPointsToAdd] = useState(0)
  const [invoiceNumber, setInvoiceNumber] = useState("")
  const [notes, setNotes] = useState("")
  const [pointsDate, setPointsDate] = useState(new Date().toLocaleString("vi-VN"))
  const [isSuccessDialogOpen, setIsSuccessDialogOpen] = useState(false)
  const [successData, setSuccessData] = useState<any>(null)

  // üÜï Audit Log
  const [auditLogs, setAuditLogs] = useState<any[]>([])

  // üîß Sau n√†y BE s·∫Ω x√°c ƒë·ªãnh nh√¢n vi√™n ƒëang ƒëƒÉng nh·∫≠p t·ª´ token/session
  const currentEmployee = { id: "EMP001", name: "Nguy·ªÖn Th·ªã B" }

  const formatNumber = (value: string) => {
    const numericValue = value.replace(/\D/g, "")
    return numericValue.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
  }

  const parseNumber = (value: string) => {
    return Number.parseInt(value.replace(/,/g, ""), 10) || 0
  }

  const handleSearch = () => {
    if (!customerCode) return

    setIsLoading(true)

    // üîß S·∫Ω thay b·∫±ng API th·∫≠t ƒë·ªÉ t√¨m ki·∫øm kh√°ch h√†ng
    setTimeout(() => {
      setCustomer({
        id: "CUS12345",
        name: "Nguy·ªÖn VƒÉn A",
        phone: "0912345678",
        totalPoints: 1250,
        memberSince: "01/01/2023",
      })

      setIsLoading(false)
    }, 1000)
  }

  const handleInvoiceAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    const formattedValue = formatNumber(value)
    setInvoiceAmount(formattedValue)

    const amount = parseNumber(formattedValue)
    setPointsToAdd(Math.floor(amount / 10000)) // üîß Sau n√†y c√¥ng th·ª©c s·∫Ω l·∫•y t·ª´ BE
  }

  const handleAddPoints = () => {
    if (!customer || !invoiceAmount || !invoiceNumber) return

    setIsLoading(true)
    const currentTime = new Date().toLocaleString("vi-VN")

    // üîß S·∫Ω thay b·∫±ng API call ƒë·ªÉ t√≠ch ƒëi·ªÉm + ghi log ·ªü BE
    setTimeout(() => {
      const newLog = {
        employeeId: currentEmployee.id,
        employeeName: currentEmployee.name,
        customerId: customer.id,
        customerName: customer.name,
        invoiceNumber,
        amount: parseNumber(invoiceAmount),
        pointsAdded: pointsToAdd,
        timestamp: currentTime,
        notes,
      }

      // üÜï Ghi l·∫°i audit log t·∫°i client (sau n√†y chuy·ªÉn v·ªÅ DB)
      setAuditLogs((prev) => [...prev, newLog])

      setSuccessData(newLog)
      setIsSuccessDialogOpen(true)
      setIsLoading(false)
    }, 1000)
  }

  const handleCloseSuccess = () => {
    setIsSuccessDialogOpen(false)
    setCustomer(null)
    setCustomerCode("")
    setInvoiceAmount("")
    setInvoiceNumber("")
    setNotes("")
    setPointsToAdd(0)
    setPointsDate(new Date().toLocaleString("vi-VN"))
  }

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">T√≠ch ƒëi·ªÉm</h2>
        <p className="text-muted-foreground">T√≠ch ƒëi·ªÉm cho kh√°ch h√†ng d·ª±a tr√™n gi√° tr·ªã h√≥a ƒë∆°n</p>
      </div>

      {/* --- T√¨m ki·∫øm kh√°ch h√†ng --- */}
      <Card>
        <CardHeader>
          <CardTitle>T√¨m ki·∫øm kh√°ch h√†ng</CardTitle>
          <CardDescription>T√¨m ki·∫øm kh√°ch h√†ng ƒë·ªÉ t√≠ch ƒëi·ªÉm</CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="customerCode" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="customerCode">M√£ kh√°ch h√†ng</TabsTrigger>
              <TabsTrigger value="phoneNumber">S·ªë ƒëi·ªán tho·∫°i</TabsTrigger>
            </TabsList>
            <TabsContent value="customerCode" className="space-y-4">
              <div className="flex items-center space-x-2">
                <div className="grid flex-1 gap-2">
                  <Label htmlFor="customerCode">M√£ kh√°ch h√†ng</Label>
                  <Input
                    id="customerCode"
                    placeholder="Nh·∫≠p m√£ kh√°ch h√†ng"
                    value={customerCode}
                    onChange={(e) => setCustomerCode(e.target.value)}
                  />
                </div>
                <div className="mt-8">
                  <Button onClick={handleSearch} disabled={!customerCode || isLoading}>
                    <Search className="mr-2 h-4 w-4" />
                    T√¨m ki·∫øm
                  </Button>
                </div>
              </div>
            </TabsContent>
            <TabsContent value="phoneNumber" className="space-y-4">
              <div className="flex items-center space-x-2">
                <div className="grid flex-1 gap-2">
                  <Label htmlFor="phoneNumber">S·ªë ƒëi·ªán tho·∫°i</Label>
                  <Input
                    id="phoneNumber"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={customerCode}
                    onChange={(e) => setCustomerCode(e.target.value)}
                  />
                </div>
                <div className="mt-8">
                  <Button onClick={handleSearch} disabled={!customerCode || isLoading}>
                    <Search className="mr-2 h-4 w-4" />
                    T√¨m ki·∫øm
                  </Button>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* --- Th√¥ng tin kh√°ch h√†ng + form t√≠ch ƒëi·ªÉm --- */}
      {customer && (
        <Card>
          <CardHeader>
            <CardTitle>Th√¥ng tin kh√°ch h√†ng</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <Label>M√£ kh√°ch h√†ng</Label>
                  <p className="font-medium">{customer.id}</p>
                </div>
                <div>
                  <Label>H·ªç v√† t√™n</Label>
                  <p className="font-medium">{customer.name}</p>
                </div>
                <div>
                  <Label>S·ªë ƒëi·ªán tho·∫°i</Label>
                  <p className="font-medium">{customer.phone}</p>
                </div>
              </div>
              <div className="space-y-4">
                <div>
                  <Label>T·ªïng ƒëi·ªÉm hi·ªán t·∫°i</Label>
                  <p className="font-medium text-pink-600">{customer.totalPoints}</p>
                </div>
                <div>
                  <Label>Th√†nh vi√™n t·ª´</Label>
                  <p className="font-medium">{customer.memberSince}</p>
                </div>
              </div>
            </div>

            <Separator className="my-6" />

            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="invoiceAmount">
                    Gi√° tr·ªã ƒë∆°n h√†ng (VNƒê) <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="invoiceAmount"
                    placeholder="Nh·∫≠p gi√° tr·ªã ƒë∆°n h√†ng"
                    value={invoiceAmount}
                    onChange={handleInvoiceAmountChange}
                    required
                  />
                  {invoiceAmount && (
                    <p className="text-sm text-gray-500 mt-1">
                      {parseNumber(invoiceAmount).toLocaleString("vi-VN")} VNƒê
                    </p>
                  )}
                </div>
                <div>
                  <Label htmlFor="invoiceNumber">
                    M√£ h√≥a ƒë∆°n <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="invoiceNumber"
                    placeholder="Nh·∫≠p m√£ h√≥a ƒë∆°n"
                    value={invoiceNumber}
                    onChange={(e) => setInvoiceNumber(e.target.value)}
                    required
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="notes">Ghi ch√∫ (t√πy ch·ªçn)</Label>
                <Textarea
                  id="notes"
                  placeholder="Nh·∫≠p ghi ch√∫ th√™m..."
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  rows={3}
                />
              </div>

              <div>
                <Label>Th·ªùi gian t√≠ch ƒëi·ªÉm</Label>
                <p className="text-sm text-gray-600 bg-gray-50 p-2 rounded">{pointsDate}</p>
              </div>

              <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                <div>
                  <p className="text-sm text-gray-500">ƒêi·ªÉm t√≠ch l≈©y</p>
                  <p className="text-lg font-bold">{pointsToAdd} ƒëi·ªÉm</p>
                </div>
                <ArrowRight className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">T·ªïng ƒëi·ªÉm sau khi c·ªông</p>
                  <p className="text-lg font-bold text-pink-600">{customer.totalPoints + pointsToAdd} ƒëi·ªÉm</p>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-end">
            <Button
              onClick={handleAddPoints}
              disabled={isLoading || !invoiceAmount || parseNumber(invoiceAmount) <= 0 || !invoiceNumber}
            >
              {isLoading ? "ƒêang x·ª≠ l√Ω..." : "T√≠ch ƒëi·ªÉm"}
            </Button>
          </CardFooter>
        </Card>
      )}

      {/* --- Dialog th√¥ng b√°o th√†nh c√¥ng --- */}
      <Dialog open={isSuccessDialogOpen} onOpenChange={setIsSuccessDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle className="text-green-600">üéâ T√≠ch ƒëi·ªÉm th√†nh c√¥ng!</DialogTitle>
          </DialogHeader>
          {successData && (
            <div className="space-y-4">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="text-gray-600">Kh√°ch h√†ng:</p>
                    <p className="font-medium">{successData.customerName}</p>
                  </div>
                  <div>
                    <p className="text-gray-600">ƒêi·ªÉm t√≠ch l≈©y:</p>
                    <p className="font-medium text-green-600">{successData.pointsAdded} ƒëi·ªÉm</p>
                  </div>
                  <div>
                    <p className="text-gray-600">M√£ h√≥a ƒë∆°n:</p>
                    <p className="font-medium">{successData.invoiceNumber}</p>
                  </div>
                  <div>
                    <p className="text-gray-600">Gi√° tr·ªã ƒë∆°n h√†ng:</p>
                    <p className="font-medium">{successData.amount.toLocaleString("vi-VN")} VNƒê</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-gray-600">Th·ªùi gian t√≠ch ƒëi·ªÉm:</p>
                    <p className="font-medium">{successData.timestamp}</p>
                  </div>
                  {successData.notes && (
                    <div className="col-span-2">
                      <p className="text-gray-600">Ghi ch√∫:</p>
                      <p className="font-medium">{successData.notes}</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            <DialogClose asChild>
              <Button onClick={handleCloseSuccess} className="bg-green-600 hover:bg-green-700">
                ƒê√≥ng
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* --- üÜï B·∫£ng Audit Log --- */}
      {auditLogs.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>L·ªãch s·ª≠ t√≠ch ƒëi·ªÉm (Audit Log)</CardTitle>
            <CardDescription>Ghi nh·∫≠n l·∫°i t·∫•t c·∫£ giao d·ªãch t√≠ch ƒëi·ªÉm</CardDescription>
          </CardHeader>
          <CardContent>
            <table className="w-full border-collapse text-sm">
              <thead>
                <tr className="bg-gray-100 text-left">
                  <th className="p-2 border">Th·ªùi gian</th>
                  <th className="p-2 border">Nh√¢n vi√™n</th>
                  <th className="p-2 border">Kh√°ch h√†ng</th>
                  <th className="p-2 border">M√£ h√≥a ƒë∆°n</th>
                  <th className="p-2 border">Gi√° tr·ªã</th>
                  <th className="p-2 border">ƒêi·ªÉm c·ªông</th>
                  <th className="p-2 border">Ghi ch√∫</th>
                </tr>
              </thead>
              <tbody>
                {auditLogs.map((log, idx) => (
                  <tr key={idx} className="border-t">
                    <td className="p-2 border">{log.timestamp}</td>
                    <td className="p-2 border">{log.employeeName}</td>
                    <td className="p-2 border">{log.customerName}</td>
                    <td className="p-2 border">{log.invoiceNumber}</td>
                    <td className="p-2 border">{log.amount.toLocaleString("vi-VN")} VNƒê</td>
                    <td className="p-2 border text-pink-600">{log.pointsAdded}</td>
                    <td className="p-2 border">{log.notes || "-"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
