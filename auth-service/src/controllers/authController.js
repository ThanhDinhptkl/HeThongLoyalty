import { sbAdmin, sbPublic, writeAudit } from "../config/supabaseClient.js";
import { normalizePhone, normalizeIdentifier } from "../utils/normalize.js";

/**
 * Helper: t·∫°o ho·∫∑c c·∫≠p nh·∫≠t profile cho user
 * - N·∫øu ch∆∞a c√≥: t·∫°o m·ªõi
 * - N·∫øu ƒë√£ c√≥ nh∆∞ng role sai ho·∫∑c ch∆∞a approved: c·∫≠p nh·∫≠t
 */
async function createOrUpdateProfile(user) {
  // ‚úÖ Lu√¥n √©p role = super-admin n·∫øu ƒë√∫ng email ntdinh10@gmail.com
  const isSuperAdmin = user.email?.toLowerCase() === "ntdinh10@gmail.com";
  const wantedRole = isSuperAdmin ? "super-admin" : "customer";

  // B·ªè qua role trong DB n·∫øu l√† super-admin
  if (isSuperAdmin) {
    return {
      id: user.id,
      email: user.email,
      role: "super-admin",
      approved: true,
    };
  }

  // C√°c user kh√°c v·∫´n x·ª≠ l√Ω b√¨nh th∆∞·ªùng
  const { data: existing, error: fetchErr } = await sbAdmin
    .from("profiles")
    .select("*")
    .eq("id", user.id)
    .maybeSingle();

  if (fetchErr) console.error("[PROFILE] L·ªói l·∫•y profile:", fetchErr);

  if (existing) return existing;

  // N·∫øu ch∆∞a c√≥ ‚Üí t·∫°o m·ªõi
  const newProfile = {
    id: user.id,
    full_name: user.user_metadata?.full_name || user.email,
    email: user.email,
    phone: user.phone,
    role: "customer",
    approved: true,
  };

  const { data: inserted, error: insertError } = await sbAdmin
    .from("profiles")
    .insert([newProfile])
    .select()
    .single();

  if (insertError) {
    console.error("[PROFILE] L·ªói t·∫°o profile:", insertError);
    throw insertError;
  }

  return inserted;
}

/**
 * ===== ƒêƒÉng k√Ω Customer =====
 */
export async function signupCustomer(req, res) {
  try {
    console.log("üü¢ [SIGNUP CUSTOMER] B·∫Øt ƒë·∫ßu...", req.body);
    const { full_name, email, phone, password } = req.body;

    if ((!email && !phone) || !password) {
      return res.status(400).json({ error: "Thi·∫øu email/phone ho·∫∑c password" });
    }

    const normPhone = phone ? normalizePhone(phone) : undefined;

    const { data, error } = await sbAdmin.auth.admin.createUser({
      email: email || undefined,
      phone: normPhone,
      password,
      user_metadata: { full_name },
      email_confirm: !!email,
      phone_confirm: !!normPhone,
    });

    if (error || !data?.user) {
      console.error("‚ùå [SIGNUP CUSTOMER] createUser error:", error);
      return res
        .status(400)
        .json({ error: error?.message || "T·∫°o user th·∫•t b·∫°i" });
    }

    const user = data.user;
    console.log("‚úÖ [SIGNUP CUSTOMER] User created:", user.id);

    try {
      const profile = await createOrUpdateProfile(user);
      await writeAudit({
        user_id: user.id,
        action: "signup_customer",
        resource: "auth",
        metadata: { email, phone: normPhone },
      });

      return res.json({
        ok: true,
        user: { id: user.id, email: user.email, phone: user.phone },
        profile,
      });
    } catch (e) {
      console.error("[SIGNUP CUSTOMER] L·ªói insert profile:", e);
      return res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o profile" });
    }
  } catch (e) {
    console.error("üî• [SIGNUP CUSTOMER] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== ƒêƒÉng k√Ω Admin =====
 */
export async function signupAdmin(req, res) {
  try {
    console.log("üü¢ [SIGNUP ADMIN] B·∫Øt ƒë·∫ßu...", req.body);
    const { full_name, email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Thi·∫øu email ho·∫∑c password" });
    }

    const { data, error } = await sbAdmin.auth.admin.createUser({
      email,
      password,
      user_metadata: { full_name },
      email_confirm: true,
    });

    if (error || !data?.user) {
      console.error("‚ùå [SIGNUP ADMIN] createUser error:", error);
      return res
        .status(400)
        .json({ error: error?.message || "T·∫°o admin th·∫•t b·∫°i" });
    }

    const user = data.user;
    console.log("‚úÖ [SIGNUP ADMIN] User created:", user.id);

    const { data: profileInserted, error: insertError } = await sbAdmin
      .from("profiles")
      .insert([
        { id: user.id, full_name, email, role: "admin", approved: false },
      ])
      .select()
      .single();

    if (insertError) {
      console.error("[SIGNUP ADMIN] L·ªói insert profile admin:", insertError);
      return res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o profile admin" });
    }

    await writeAudit({
      user_id: user.id,
      action: "signup_admin",
      resource: "auth",
      metadata: { email },
    });

    return res.json({
      ok: true,
      message: "ƒêƒÉng k√Ω admin th√†nh c√¥ng, ch·ªù duy·ªát",
      user: { id: user.id, email: user.email },
      profile: profileInserted,
    });
  } catch (e) {
    console.error("üî• [SIGNUP ADMIN] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== Duy·ªát Admin =====
 */
export async function approveAdmin(req, res) {
  try {
    console.log("üü¢ [APPROVE ADMIN] id=", req.params.id);
    const { id } = req.params;

    const { data, error } = await sbAdmin
      .from("profiles")
      .update({ approved: true })
      .eq("id", id)
      .eq("role", "admin")
      .select();

    if (error || !data || data.length === 0) {
      return res
        .status(400)
        .json({ error: "Kh√¥ng t√¨m th·∫•y admin ho·∫∑c ƒë√£ duy·ªát" });
    }

    await writeAudit({
      user_id: id,
      action: "approve_admin",
      resource: "auth",
    });

    return res.json({
      ok: true,
      message: "Duy·ªát admin th√†nh c√¥ng",
      updated: data,
    });
  } catch (e) {
    console.error("üî• [APPROVE ADMIN] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== ƒêƒÉng nh·∫≠p =====
 */
export async function login(req, res) {
  try {
    console.log("üü¢ [LOGIN] body:", req.body);
    const { identifier, email, phone, password } = req.body;
    const id = identifier || email || phone;

    if (!id || !password) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin ƒëƒÉng nh·∫≠p" });
    }

    const { isEmail, value } = normalizeIdentifier(id);
    const phoneValue = !isEmail ? normalizePhone(value) : undefined;

    const { data, error } = await sbPublic.auth.signInWithPassword(
      isEmail ? { email: value, password } : { phone: phoneValue, password }
    );

    if (error) {
      console.error("[LOGIN] Supabase signIn error:", error);
      return res.status(401).json({ error: "Sai th√¥ng tin ƒëƒÉng nh·∫≠p" });
    }

    const { session, user } = data;
    if (!user) return res.status(500).json({ error: "Auth fail" });

    // L·∫•y ho·∫∑c c·∫≠p nh·∫≠t profile
    const profile = await createOrUpdateProfile(user);

    if (profile.role === "admin" && !profile.approved) {
      return res
        .status(403)
        .json({ error: "Admin ch∆∞a ƒë∆∞·ª£c super-admin duy·ªát" });
    }

    await writeAudit({
      user_id: user.id,
      action: "login",
      resource: "auth",
      metadata: { role: profile.role },
    });

    // Set cookies
    res.cookie("sb-access-token", session.access_token, {
      httpOnly: true,
      secure: false,
      sameSite: "lax",
      path: "/",
      maxAge: 60 * 60 * 24 * 7,
    });
    res.cookie("sb-refresh-token", session.refresh_token, {
      httpOnly: true,
      secure: false,
      sameSite: "lax",
      path: "/",
      maxAge: 60 * 60 * 24 * 30,
    });
    res.cookie("sb-user-role", profile.role, {
      httpOnly: false,
      secure: false,
      sameSite: "lax",
      path: "/",
      maxAge: 60 * 60 * 24 * 7,
    });

    return res.json({
      ok: true,
      user: {
        id: user.id,
        email: user.email,
        phone: user.phone,
        full_name: user.user_metadata?.full_name || profile.full_name,
      },
      profile,
    });
  } catch (e) {
    console.error("üî• [LOGIN] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== Me =====
 */
export async function me(req, res) {
  try {
    const token =
      req.cookies["sb-access-token"] ||
      (req.headers.authorization || "").replace("Bearer ", "");
    if (!token) return res.status(401).json({ error: "Unauthorized" });

    const { data, error } = await sbAdmin.auth.getUser(token);
    if (error || !data?.user)
      return res.status(401).json({ error: "Invalid token" });

    const user = data.user;
    const profile = await createOrUpdateProfile(user);

    return res.json({
      ok: true,
      user: {
        id: user.id,
        email: user.email,
        phone: user.phone,
        full_name: user.user_metadata?.full_name,
      },
      profile,
    });
  } catch (e) {
    console.error("üî• [ME] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== L·∫•y profile =====
 */
export async function getProfile(req, res) {
  try {
    const { id } = req.params;
    const { data, error } = await sbAdmin
      .from("profiles")
      .select("*")
      .eq("id", id)
      .maybeSingle();

    if (error) return res.status(500).json({ error: "Server error" });
    if (!data) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user" });

    return res.json({ ok: true, profile: data });
  } catch (e) {
    console.error("üî• [GET PROFILE] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}

/**
 * ===== Logout =====
 */
export async function logout(req, res) {
  try {
    res.clearCookie("sb-access-token", { path: "/" });
    res.clearCookie("sb-refresh-token", { path: "/" });
    res.clearCookie("sb-user-role", { path: "/" });
    return res.json({ ok: true, message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (e) {
    console.error("üî• [LOGOUT] Server error:", e);
    return res.status(500).json({ error: "Server error" });
  }
}
